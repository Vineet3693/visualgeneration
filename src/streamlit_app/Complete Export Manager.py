
class ExportManager:
    """Complete export management system"""
    
    def __init__(self):
        self.supported_formats = ['PNG', 'HTML', 'SVG', 'PDF', 'JSON']
    
    def fig_to_png_base64(self, fig: go.Figure, width: int = 1200, height: int = 800) -> str:
        """Convert figure to base64 PNG with high quality"""
        try:
            img_bytes = fig.to_image(
                format="png", 
                width=width, 
                height=height, 
                scale=2,  # High resolution
                engine="kaleido"
            )
            return base64.b64encode(img_bytes).decode()
        except Exception as e:
            # Fallback method
            try:
                import matplotlib.pyplot as plt
                fig_mpl, ax = plt.subplots(figsize=(width/100, height/100))
                ax.text(0.5, 0.5, 'Visualization Export\n(Fallback Mode)', 
                       ha='center', va='center', fontsize=20)
                ax.set_xlim(0, 1)
                ax.set_ylim(0, 1)
                ax.axis('off')
                
                buffer = io.BytesIO()
                plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
                buffer.seek(0)
                img_bytes = buffer.getvalue()
                plt.close()
                
                return base64.b64encode(img_bytes).decode()
            except:
                return ""
    
    def fig_to_html(self, fig: go.Figure, title: str = "Visualization") -> str:
        """Convert figure to standalone HTML"""
        html_content = fig.to_html(
            include_plotlyjs='cdn',
            div_id=f"viz_{datetime.now().timestamp()}",
            config={
                'displayModeBar': True,
                'displaylogo': False,
                'modeBarButtonsToAdd': ['downloadSvg'],
                'toImageButtonOptions': {
                    'format': 'png',
                    'filename': 'visualization',
                    'height': 800,
                    'width': 1200,
                    'scale': 2
                }
            }
        )
        
        # Add custom styling
        styled_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{title}</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 20px;
                    background: #f8f9fa;
                }}
                .header {{
                    text-align: center;
                    padding: 20px;
                    background: white;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    margin-bottom: 20px;
                }}
                .viz-container {{
                    background: white;
                    border-radius: 10px;
                    padding: 20px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                .footer {{
                    text-align: center;
                    margin-top: 20px;
                    color: #666;
                    font-size: 14px;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ðŸŽ¨ {title}</h1>
                <p>Generated by Free Visual AI Generator</p>
            </div>
            <div class="viz-container">
                {html_content}
            </div>
            <div class="footer">
                <p>Created on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p>Powered by Free Visual AI Generator</p>
            </div>
        </body>
        </html>
        """
        
        return styled_html
    
    def create_download_link(self, content: str, filename: str, content_type: str) -> str:
        """Create download link for content"""
        if content_type == "image/png":
            href = f"data:{content_type};base64,{content}"
        else:
            b64 = base64.b64encode(content.encode()).decode()
            href = f"data:{content_type};base64,{b64}"
        
        return f'<a href="{href}" download="{filename}" style="text-decoration: none; background: #007bff; color: white; padding: 8px 16px; border-radius: 4px; display: inline-block; margin: 5px;">ðŸ“¥ Download {filename}</a>'
